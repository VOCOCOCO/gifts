import asyncio
import json
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import WebAppInfo, LabeledPrice
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage

TOKEN = "7615480625:AAGSwwPyMCfU_fvAu5qnSWCf-Ip_JnDCtJk"
PROVIDER_TOKEN = "YOUR_PROVIDER_TOKEN"

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())  
router = Router()
dp.include_router(router)

# –ü–æ–¥–∞—Ä–∫–∏ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å
GIFTS = {
    "mammoth": {"title": "–ú–∞–º–æ–Ω—Ç", "price": 1},
    "durov": {"title": "–§–∏–≥—É—Ä–∫–∞ –ü–∞–≤–ª–∞ –î—É—Ä–æ–≤–∞", "price": 2000},
    "dog": {"title": "–ü—ë—Å", "price": 500},
    "mic": {"title": "–ú–∏–∫—Ä–æ—Ñ–æ–Ω", "price": 300},
}

USER_STARS = {}  # –•—Ä–∞–Ω–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ —É –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@router.message(Command("start", "webapp"))
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(
                text="–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω üéÅ", 
                web_app=WebAppInfo(url="https://vocococo.github.io/gifts/")
            )]
        ],
        resize_keyboard=True
    )
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞–π –º–∞–≥–∞–∑–∏–Ω –∏ –≤—ã–±–∏—Ä–∞–π –ø–æ–¥–∞—Ä–∫–∏! üéÅ", reply_markup=keyboard)

@router.message(lambda message: message.web_app_data)
async def web_app_data(message: types.Message):
    data = json.loads(message.web_app_data.data)
    gift_id = data["gift_id"]
    price = int(data["price"])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—É–º–º—ã
    total_amount = price * 1  # —Å—É–º–º–∞ –≤ —Å–∞–º—ã—Ö –º–∞–ª–µ–Ω—å–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –≤–∞–ª—é—Ç—ã

    payload = json.dumps({"gift_id": gift_id})

    await bot.send_invoice(
        chat_id=message.chat.id,
        title=GIFTS[gift_id]["title"],
        description="–û–ø–ª–∞—Ç–∞ –∑–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ üéÅ",
        payload=payload,
        provider_token=PROVIDER_TOKEN,
        currency="XTR",
        prices=[LabeledPrice(label=GIFTS[gift_id]["title"], amount=total_amount)],
        start_parameter="gift-purchase"
    )

@router.pre_checkout_query()
async def pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(
        pre_checkout_query.id, ok=True  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –∏–Ω–≤–æ–π—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    )

@router.message(lambda message: message.successful_payment is not None)
async def successful_payment(message: types.Message):
    payment = message.successful_payment
    user_id = message.from_user.id
    amount_paid = payment.total_amount / 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É

    # –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –∑–≤–µ–∑–¥ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    user_stars = amount_paid  # –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ —Ä–∞–≤–Ω–æ —Å—É–º–º–µ –æ–ø–ª–∞—Ç—ã

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(
        chat_id=user_id,
        text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í—Å–µ –ø–æ–¥–∞—Ä–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())